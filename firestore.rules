rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // üîê R√àGLES DE S√âCURIT√â POUR YOURFEED YOUTUBE APPLICATION
    // Seuls les utilisateurs authentifi√©s peuvent acc√©der √† leurs propres donn√©es
    
    // Collection principale des utilisateurs
    // Structure: /users/{userId} { categories: [], favorites: [] }
    match /users/{userId} {
      // ‚úÖ Acc√®s autoris√© uniquement √† l'utilisateur authentifi√© propri√©taire
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // ‚úÖ Validation des donn√©es lors de la cr√©ation
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
      
      // ‚úÖ Validation des donn√©es lors de la mise √† jour
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Collection des vid√©os par utilisateur
    // Structure: /videos/{userId}/userVideos/{videoId}
    match /videos/{userId}/userVideos/{videoId} {
      // ‚úÖ Acc√®s autoris√© uniquement √† l'utilisateur authentifi√© propri√©taire
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // ‚úÖ Validation stricte des donn√©es vid√©o lors de la cr√©ation
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateVideoData(request.resource.data);
      
      // ‚úÖ Validation stricte des donn√©es vid√©o lors de la mise √† jour
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && validateVideoData(request.resource.data);
    }
    
    // üö´ BLOCAGE TOTAL - Toute autre collection ou document est interdit
    match /{document=**} {
      allow read, write: if false;
    }
    
    // üîç FONCTIONS DE VALIDATION DES DONN√âES
    
    // Validation des donn√©es utilisateur (cat√©gories et favoris)
    function validateUserData(data) {
      return data.keys().hasAny(['categories', 'favorites'])
        && (!data.keys().hasAll(['categories']) || data.categories is list)
        && (!data.keys().hasAll(['favorites']) || data.favorites is list)
        && data.size() <= 10; // Limite le nombre de champs autoris√©s
    }
    
    // Validation stricte des donn√©es vid√©o
    function validateVideoData(data) {
      return data.keys().hasAll(['id', 'title', 'channelId', 'publishedAt', 'is_deleted'])
        && data.id is string && data.id.size() > 0 && data.id.size() <= 50
        && data.title is string && data.title.size() > 0 && data.title.size() <= 500
        && data.channelId is string && data.channelId.size() > 0 && data.channelId.size() <= 50
        && data.publishedAt is string && data.publishedAt.size() > 0
        && data.is_deleted is bool
        && data.size() <= 20; // Limite le nombre total de champs
    }
    
    // Validation des cat√©gories (optionnel pour validation future)
    function validateCategoryData(data) {
      return data.keys().hasAll(['id', 'name', 'isDefault', 'createdAt'])
        && data.id is string && data.id.size() > 0
        && data.name is string && data.name.size() > 0 && data.name.size() <= 100
        && data.isDefault is bool
        && data.createdAt is string && data.createdAt.size() > 0
        && data.size() <= 15;
    }
    
    // Validation des cha√Ænes favorites (optionnel pour validation future)
    function validateChannelData(data) {
      return data.keys().hasAll(['id', 'title'])
        && data.id is string && data.id.size() > 0
        && data.title is string && data.title.size() > 0 && data.title.size() <= 200
        && data.size() <= 15;
    }
  }
} 